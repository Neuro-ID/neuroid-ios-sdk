# ******************************************************************
# This workflow will trigger once a PR goes into main from a branch
# that does has a prefix of `releases/`
# ******************************************************************

name: Deploy Prod Sandbox Apps

on:
  pull_request_target:
    types:
      - closed
    branches:
      - main
  workflow_dispatch:
  repository_dispatch:
    types: [on-demand-testflight]

env:
  VERSION: "1.3.0"

jobs:
  updateSchema:
    if: github.event.pull_request == null
    name: Retrieve new Schema.json
    runs-on: ubuntu-latest
    steps:
      - name: Checkout main
        uses: actions/checkout@v3
        with:
          path: neuroid-ios-sdk

      - name: Checkout schema
        uses: actions/checkout@v3
        with:
          repository: Neuro-ID/nid-event-schema
          token: ${{ secrets.SCHEMA_PAT }}
          path: schema

      - name: Update Internal Library
        run: |
          ls neuroid-ios-sdk/
          ls schema/
          cp schema/src/schema.json neuroid-ios-sdk/NeuroID/

  deploySandboxApps:
    if: github.event.pull_request.merged && startsWith(github.head_ref, 'releases/')
    runs-on: macos-latest
    steps:
      - name: Branch Checkout
        uses: actions/checkout@v3

      - name: Set up ruby env
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 2.7.6
          bundler-cache: true

      - name: Restore cached Pods
        uses: actions/cache/restore@v3
        with:
          path: Pods
          key: ${{ runner.os }}-pods-prod-apps-${{ hashFiles('**/Podfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-pods-prod-apps

      - name: CocoaPod Install
        run: pod install

      - name: Save Updated Pods
        id: cache-pods-save
        uses: actions/cache/save@v3
        with:
          path: Pods
          key: ${{ runner.os }}-pods-prod-apps-${{ hashFiles('**/Podfile.lock') }}

      - name: Get last version from tags
        run: |
          git fetch --prune --unshallow
          echo "VERSION=$(git describe --tags)" >> $GITHUB_ENV

      - name: Run iOS Unit Testing for SDK
        run: bundle exec fastlane test

      - name: Run iOS Sandbox Deployment
        run: |
          curl \
             -X POST \
             -H "Accept: application/vnd.github.v3+json" \
             -H "Authorization: token ${{ secrets.GPR_API_KEY }}" \
             https://api.github.com/repos/Neuro-ID/neuroid-ios-sdk-sandbox/dispatches \
             -d '{"event_type":"on-demand-testflight","client_payload":{"version":"5.ios-${{env.VERSION}}", "message": "${{ github.event.commits[0].message }}"}}'

      - name: Run iOS SwiftUI Sandbox Deployment
        run: |
          curl \
            -X POST \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Authorization: token ${{ secrets.GPR_API_KEY }}" \
            https://api.github.com/repos/Neuro-ID/neuroid-ios-sdk-sandbox-swiftui/dispatches \
            -d '{"event_type":"on-demand-testflight","client_payload":{"version":"5.ios-${{env.VERSION}}", "message": "${{ github.event.commits[0].message }}"}}'

      - name: Run iOS Storyboard Sandbox Deployment
        run: |
          curl \
            -X POST \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Authorization: token ${{ secrets.GPR_API_KEY }}" \
            https://api.github.com/repos/Neuro-ID/neuroid-ios-sdk-sandbox-storyboard/dispatches \
            -d '{"event_type":"on-demand-testflight","client_payload":{"version":"5.ios-${{env.VERSION}}", "message": "${{ github.event.commits[0].message }}"}}'

      - name: Run ReactNative Sandbox Deployment
        run: |
          curl \
             -X POST \
             -H "Accept: application/vnd.github.v3+json" \
             -H "Authorization: token ${{ secrets.GPR_API_KEY }}" \
             https://api.github.com/repos/Neuro-ID/neuroid-reactnative-sdk/dispatches \
             -d '{"event_type":"on-demand-testflight","client_payload":{"version":"5.ios-${{env.VERSION}}", "message": "${{ github.event.commits[0].message }}"}}'

      - name: Send Slack Notification on Success
        if: success()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_CHANNEL: ${{ secrets.MOBILE_SLACK_NOTIFICATIONS_CHANNEL }}
          SLACK_COLOR: ${{ job.status }}
          SLACK_ICON: https://github.com/rtCamp.png?size=48
          SLACK_MESSAGE: "Successful Prod Sandbox Deployment for iOS"
          SLACK_TITLE: Successful Prod Sandbox Deployment for iOS
          SLACK_USERNAME: rtBot
          SLACK_WEBHOOK: ${{ secrets.MOBILE_SLACK_WEBHOOK }}

      - name: Send Slack Notification on Failure
        if: failure()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_CHANNEL: ${{ secrets.MOBILE_SLACK_NOTIFICATIONS_CHANNEL }}
          SLACK_COLOR: ${{ job.status }}
          SLACK_ICON: https://github.com/rtCamp.png?size=48
          SLACK_MESSAGE: "Failed Prod Sandbox Deployment for iOS"
          SLACK_TITLE: Failed Prod Sandbox Deployment for iOS
          SLACK_USERNAME: rtBot
          SLACK_WEBHOOK: ${{ secrets.MOBILE_SLACK_WEBHOOK }}
