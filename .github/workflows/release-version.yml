# ******************************************************************
# This workflow will trigger once the `version-update.yaml` workflow PR is complete
# or a PR goes into main from a branch that has a prefix of `releases/`
# ******************************************************************

name: Release SDK Version

on:
  pull_request_target:
    types:
      - closed
    branches:
      - main

jobs:
  releaseProjectVersion:
    runs-on: macos-latest
    if: github.event.pull_request.merged && startsWith(github.head_ref, 'releases/')
    name: Create Release from Tag
    permissions:
      contents: write
      issues: write
    steps:
      - name: Branch Checkout
        uses: actions/checkout@v3

      - name: Set up ruby env
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 2.7.6
          bundler-cache: true

      - name: Get Updated Version
        run: |
          PACKAGE_VERSION=$(bundle exec fastlane get_project_version | grep -o "SDK Version:.*" | sed "s/SDK Version: //" )
          echo "PACKAGE_VERSION=${PACKAGE_VERSION}" >> $GITHUB_ENV

      - name: Create Release
        uses: actions/github-script@v5
        with:
          script: |
            const name = 'Release Version: ${{ env.PACKAGE_VERSION }}';
            const body = 'SDK Version ${{ env.PACKAGE_VERSION }}';

            const createRelease = async () => {
                await github.rest.repos.createRelease({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    tag_name: 'v${{ env.PACKAGE_VERSION }}',
                    name: name,
                    body: body,
                    draft: false,
                    prerelease: false,
                    generate_release_notes: true
                });

                console.log(`Release created`);
            }
            createRelease();

      - name: Update Release to also have "Latest" Tag
        run: |
          git config --global user.email developer@neuro-id.com
          git config --global user.name neuroid-developer
          set +e
          git push origin :latest
          git tag -d latest
          git tag latest
          git push origin latest
          set -e

      - name: Release to Cocoapods
        env:
          COCOAPODS_TRUNK_TOKEN: ${{ secrets.COCOAPODS_TRUNK_TOKEN }}
        run: |
          pod trunk push NeuroID.podspec --allow-warnings

  notifications:
    runs-on: ubuntu-latest
    if: ${{ always() }}
    needs: [releaseProjectVersion]
    steps:
      - name: Send Slack Notification on Success
        if: ${{ needs.releaseProjectVersion.result == 'success' }}
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_CHANNEL: mobile-sdk-tech-team
          SLACK_COLOR: ${{ job.status }}
          SLACK_ICON: https://github.com/rtCamp.png?size=48
          SLACK_MESSAGE: "Successfully released iOS SDK version ${{ env.PACKAGE_VERSION }}"
          SLACK_TITLE: Success release iOS SDK
          SLACK_USERNAME: rtBot
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}

      - name: Send Slack Notification on Failure
        if: ${{ needs.releaseProjectVersion.result == 'failure' }}
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_CHANNEL: mobile-sdk-tech-team
          SLACK_COLOR: ${{ job.status }}
          SLACK_ICON: https://github.com/rtCamp.png?size=48
          SLACK_MESSAGE: "Failed execution on iOS SDK release for version ${{ env.PACKAGE_VERSION }}"
          SLACK_TITLE: Failed release iOS SDK
          SLACK_USERNAME: rtBot
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
