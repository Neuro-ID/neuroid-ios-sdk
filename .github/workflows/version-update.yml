# ******************************************************************
# To create an SDK package release PR, run this workflow from the GitHub UI and
# select parameters based on the type of release:
#
# - Major Update
#   Choose if there are breaking changes affecting sdk's across platforms i.e. react-native, android, ios etc.
#
# - Minor Update
#   Choose if there are multiple minor changes affecting sdk's across platforms i.e. react-native, android, ios etc.
#
# - Patch Update
#   Choose if the change affects only the react-native platform.
# ******************************************************************

name: Pre-Release SDK PR

on:
  workflow_dispatch:
    inputs:
      version_update:
        description: >
          Choose the type of version update:            
          ** major: Cross platform breaking changes                                   
          ** minor: Cross platform minor changes                    
          ** patch: Changes affecting only this platform
        required: true
        default: "patch"
        type: choice
        options: ["major", "minor", "patch"]

jobs:
  updateProjectVersion:
    runs-on: macos-latest
    name: Update version for podspec and project
    permissions:
      pull-requests: write
      contents: write
      issues: write
    steps:
      - name: Update version
        run: echo "Updating version with release type ${{ inputs.version_update }}"

      - name: Branch Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up ruby env
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 2.7.6
          bundler-cache: true

      - name: Restore cached Pods
        uses: actions/cache/restore@v3
        with:
          path: Pods
          key: ${{ runner.os }}-pods-version-${{ hashFiles('**/Podfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-pods-version

      - name: CocoaPod Install
        run: pod install

      - name: Save Updated Pods
        id: cache-pods-save
        uses: actions/cache/save@v3
        with:
          path: Pods
          key: ${{ runner.os }}-pods-version-${{ hashFiles('**/Podfile.lock') }}

      - name: Run iOS Unit Testing for SDK
        run: bundle exec fastlane test

      - name: Update Current Version
        run: bundle exec fastlane update_project_version
        env:
          releaseType: ${{ inputs.version_update }}

      - name: Get Updated Version
        run: |
          PACKAGE_VERSION=$(bundle exec fastlane get_project_version | grep -o "SDK Version:.*" | sed "s/SDK Version: //" )
          echo "PACKAGE_VERSION=${PACKAGE_VERSION}" >> $GITHUB_ENV
          echo "BRANCH_NAME=releases/${PACKAGE_VERSION}_version_update" >> $GITHUB_ENV

      - name: Get previous release tag
        run: echo TAG="$(git describe --abbrev=0 --tags)" >> $GITHUB_ENV

      - name: Get current commit hash
        run: echo HASH="$(git rev-parse HEAD)" >> $GITHUB_ENV

      - name: Create comparison URL
        run: echo URL="https://github.com/Neuro-ID/neuroid-ios-sdk/compare/${{ env.TAG }}...${{ env.HASH }}" >> $GITHUB_ENV

      - name: Commit version changes
        run: |
          git config --global user.email developer@neuro-id.com
          git config --global user.name neuroid-developer
          git checkout -b ${{ env.BRANCH_NAME }}
          git status
          set +e
          git add NeuroID.podspec
          git add NeuroID/Info.plist
          git commit -m "Update SDK to $PACKAGE_VERSION"
          git tag "v$PACKAGE_VERSION"
          git push --set-upstream origin ${{ env.BRANCH_NAME }}
          set -e

      - name: Open Pull Request
        uses: actions/github-script@v5
        with:
          gh-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const title = 'Release Version: ${{ env.PACKAGE_VERSION }}';
            const body = 'Once merged, this PR will trigger an action to release version: ${{ env.PACKAGE_VERSION }}';
            const headBranch = '${{ env.BRANCH_NAME }}';
            const baseBranch = 'main';

            const createPullRequest = async () => {
              const response = await github.rest.pulls.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: title,
                body: body,
                head: headBranch,
                base: baseBranch
              });
              console.log(`Pull request ${response.data.number} created`);
            };

            createPullRequest();
