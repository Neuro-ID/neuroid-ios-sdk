# ******************************************************************
# This workflow will trigger once a PR opens to main
# ******************************************************************

name: SDK Build and Test

on:
  pull_request:
    # branches: TODO: Re-add this before merging
    # - main
  push:
    branches:
      - main

jobs:
  build-test:
    name: Build and Test (Xcode ${{ matrix.xcode }})
    runs-on: macos-${{ matrix.macos }}
    env:
      DEVELOPER_DIR: "/Applications/Xcode_${{ matrix.xcode }}.app/Contents/Developer"
    strategy:
      fail-fast: false
      matrix:
        include:
          - macos: 15
            xcode: '16.3'    # Swift 6.1
            ios-simulator: 'iPhone 16 Pro,OS=latest'
            run_sonar: true
          - macos: 15
            xcode: '16.0'    # Swift 6.0
            ios-simulator: 'iPhone 16 Pro,OS=latest'
          - macos: 14
            xcode: '15.0'    # Swift 5.9
            ios-simulator: "iPhone 15 Pro,OS=latest"
          - macos: 13
            xcode: '14.3'    # Swift 5.8
            ios-simulator: "iPhone 14 Pro,OS=latest"

    steps:
      - uses: actions/checkout@v5

      - name: Install xcbeautify
        run: brew install xcbeautify

      - name: Setup Xcode ${{ matrix.xcode }}
        run: |
          ls /Applications/
          sudo xcode-select -s ${{ env.DEVELOPER_DIR }}
          xcodebuild -version

      - name: Build and Test (Simulator)
        run: |
          set -o pipefail
          # Capture both raw and prettified logs (no ANSI colors) so artifacts are consistent across matrix runs
          xcodebuild clean test \
            -project NeuroID.xcodeproj \
            -scheme NeuroID \
            -destination "platform=iOS Simulator,name=${{ matrix.ios-simulator }}" \
            -configuration Debug \
            -resultBundlePath TestResults.xcresult > xcodebuild_raw.log | \
          xcbeautify --disable-colored-output --renderer github-actions > xcodebuild.log

      - name: Upload xcodebuild logs and test results
        uses: actions/upload-artifact@v4
        with:
          name: xcode-test-artifacts-macos-${{ matrix.macos }}-xcode-${{ matrix.xcode }}
          path: |
            TestResults.xcresult
            xcodebuild.log
            xcodebuild_raw.log
      
      - name: Convert Coverage for Sonar (only on latest)
        if: ${{ matrix.run_sonar == true }}
        run: ./Scripts/xccov-to-sonarqube-generic.sh TestResults.xcresult > Coverage.xml

      - name: Upload coverage for Sonar (only on latest)
        if: ${{ matrix.run_sonar == true }}
        uses: actions/upload-artifact@v4
        with:
          name: coverage-artifact
          path: Coverage.xml

  sonar:
    name: SonarQube Scan (aggregate)
    needs: build-test
    runs-on: ubuntu-latest
    steps:
      - name: Download coverage artifact
        uses: actions/download-artifact@v4
        with:
          name: coverage-artifact

      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v6
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
